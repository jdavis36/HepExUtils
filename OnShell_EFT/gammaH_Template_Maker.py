import numpy as np
from scipy.interpolate import interp1d
### To make templates we need the luminosity ###
lumi=3000
pt_Cut = 400 # GeV 
# Lists of Fraction of events as a function of photon pT 
# Subject to change since the signal are from lhe events 
# Must be calculated before hand 
pt_Array=np.linspace(10,1000,num=100,endpoint=True)
print(pt_Array)
Bkg_Fraction =[1.0, 1.0, 1.0, 0.8080376982688904, 0.6672032475471497, 0.5025128126144409, 0.23384614288806915, 0.08979206532239914, 0.045485708862543106, 0.025217240676283836, 0.016615688800811768, 0.00974999275058508, 0.007431160192936659, 0.005268192384392023, 0.004047740716487169, 0.003892221488058567, 0.0033639559987932444, 0.002588874427601695, 0.0023163193836808205, 0.001812517293728888, 0.001646095304749906, 0.001552100176922977, 0.0015000877901911736, 0.0011850447626784444, 0.0009696290362626314, 0.0008740921621210873, 0.0007794957491569221, 0.0007750513614155352, 0.0004632920026779175, 0.0002355133619857952, 0.0002329687704332173, 0.00016906468954402953, 0.00011961463314946741, 0.00011905308929271996, 0.00011490226461319253, 0.0001140469394158572, 0.0001140469394158572, 0.0001140469394158572, 4.977616754331393e-06, 4.682260168920038e-06, 4.682260168920038e-06, 3.988829575973796e-06, 3.2406728678324725e-06, 3.2406728678324725e-06, 2.6194770725851413e-06, 2.6194770725851413e-06, 2.6194770725851413e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
ghzgs2_Fraction=[1.0, 1.0, 0.9920422434806824, 0.9692515134811401, 0.9371355772018433, 0.8990940451622009, 0.8567033410072327, 0.8106470704078674, 0.7643629312515259, 0.7193702459335327, 0.6762197613716125, 0.6363930106163025, 0.5990921854972839, 0.5634816884994507, 0.5293335318565369, 0.49773043394088745, 0.4684443473815918, 0.43997493386268616, 0.412740021944046, 0.3884868919849396, 0.3661709725856781, 0.34453877806663513, 0.32433098554611206, 0.3049778640270233, 0.2876569330692291, 0.27225419878959656, 0.25618672370910645, 0.24247431755065918, 0.2287239134311676, 0.21596109867095947, 0.2047746628522873, 0.19411998987197876, 0.1833323836326599, 0.17381726205348969, 0.16416917741298676, 0.15520483255386353, 0.14787381887435913, 0.14006799459457397, 0.1333257406949997, 0.12671642005443573, 0.12069587409496307, 0.11465633660554886, 0.10882570594549179, 0.10326097160577774, 0.09856988489627838, 0.09385979920625687, 0.08960553258657455, 0.08550319820642471, 0.08178071677684784, 0.07796327024698257, 0.07431675493717194, 0.07072721421718597, 0.06742256134748459, 0.06438379734754562, 0.060623325407505035, 0.05783146247267723, 0.05528649687767029, 0.052836496382951736, 0.050405483692884445, 0.04801245778799057, 0.046132225543260574, 0.044460903853178024, 0.04278958588838577, 0.04100431129336357, 0.03918105363845825, 0.037604693323373795, 0.03587639704346657, 0.03441399335861206, 0.032932598143815994, 0.03118530847132206, 0.02976088784635067, 0.028393443673849106, 0.02706398442387581, 0.025696542114019394, 0.0247089434415102, 0.0239302609115839, 0.022923670709133148, 0.021917080506682396, 0.021062428131699562, 0.02007482945919037, 0.018954286351799965, 0.018213586881756783, 0.017529865726828575, 0.016770174726843834, 0.01606746017932892, 0.015402731485664845, 0.014813970774412155, 0.0142442025244236, 0.013750403188169003, 0.01325660478323698, 0.012553890235722065, 0.012022106908261776, 0.011718230322003365, 0.011167454533278942, 0.010654663667082787, 0.010198849253356457, 0.009819003753364086, 0.009515127167105675, 0.009040320292115211, 0.008774428628385067]
ghzgs4_Fraction=[1.0, 1.0, 0.9928938150405884, 0.9730789661407471, 0.9438579678535461, 0.90894615650177, 0.8702305555343628, 0.8280946016311646, 0.7887598276138306, 0.7481570839881897, 0.7079082131385803, 0.6699298024177551, 0.6323052644729614, 0.5966562628746033, 0.5635725855827332, 0.5335554480552673, 0.5027422308921814, 0.47352126240730286, 0.4468066394329071, 0.42177271842956543, 0.39797723293304443, 0.376216322183609, 0.3560771346092224, 0.3370584547519684, 0.3184525668621063, 0.30199918150901794, 0.28563424944877625, 0.27006545662879944, 0.2553517818450928, 0.2422303408384323, 0.22958070039749146, 0.21778616309165955, 0.2069646716117859, 0.1963495910167694, 0.18658961355686188, 0.17715397477149963, 0.16877985000610352, 0.16073007881641388, 0.1530931144952774, 0.14492540061473846, 0.13861532509326935, 0.13142065703868866, 0.12496314197778702, 0.11974405497312546, 0.11461343616247177, 0.10877513885498047, 0.10358554124832153, 0.0985138863325119, 0.0939435064792633, 0.0895795226097107, 0.08459632843732834, 0.08061567693948746, 0.07701834291219711, 0.07374535501003265, 0.07023648172616959, 0.06634428352117538, 0.06342513114213943, 0.0612136572599411, 0.058884236961603165, 0.056171491742134094, 0.05369463935494423, 0.05145367607474327, 0.04915374144911766, 0.0467948354780674, 0.0448487363755703, 0.04293212294578552, 0.04122191295027733, 0.03948222100734711, 0.03774252533912659, 0.036091290414333344, 0.034351594746112823, 0.03284779191017151, 0.031697824597358704, 0.030488884076476097, 0.029044052585959435, 0.028041517361998558, 0.026803089305758476, 0.025682609528303146, 0.024739045649766922, 0.02370702289044857, 0.022675001993775368, 0.021731438115239143, 0.02090582065284252, 0.020345579832792282, 0.019785339012742043, 0.019077667966485023, 0.018369995057582855, 0.017691807821393013, 0.01736745797097683, 0.016571328043937683, 0.015804681926965714, 0.014831633307039738, 0.014418823644518852, 0.013858583755791187, 0.013534233905375004, 0.013121425174176693, 0.012443238869309425, 0.011941971257328987, 0.011440702714025974, 0.011086867190897465]
ghgsgs2_Fraction=[1.0, 1.0, 0.9947865009307861, 0.9811047911643982, 0.9594069123268127, 0.9308682084083557, 0.8981104493141174, 0.8615556359291077, 0.8235542178153992, 0.7861555814743042, 0.7488171458244324, 0.711117148399353, 0.6754060983657837, 0.6400867700576782, 0.6066057682037354, 0.5711358189582825, 0.5415121912956238, 0.5126721262931824, 0.4863635003566742, 0.4602055251598358, 0.4366091191768646, 0.41427838802337646, 0.393002450466156, 0.3721182644367218, 0.35346412658691406, 0.33471959829330444, 0.3168489933013916, 0.29970166087150574, 0.2841816544532776, 0.26929453015327454, 0.25606486201286316, 0.24235300719738007, 0.22969593107700348, 0.218093603849411, 0.20748576521873474, 0.19796280562877655, 0.18843986093997955, 0.1790977269411087, 0.17099116742610931, 0.16267365217208862, 0.1545972377061844, 0.14724406599998474, 0.14100593328475952, 0.13395413756370544, 0.12810777127742767, 0.12214085459709167, 0.11668625473976135, 0.1113220602273941, 0.10695235431194305, 0.10282373428344727, 0.0978211760520935, 0.09372268617153168, 0.08971461653709412, 0.08558599650859833, 0.08239158242940903, 0.07868486642837524, 0.07582195848226547, 0.07280836254358292, 0.06952355057001114, 0.06605792045593262, 0.0630141943693161, 0.060844406485557556, 0.05858421325683594, 0.0560527965426445, 0.053250160068273544, 0.05141186714172363, 0.049392759799957275, 0.047524333000183105, 0.045655909925699234, 0.043908026069402695, 0.042280685156583786, 0.04059307649731636, 0.03908627852797508, 0.03727812319993973, 0.035831600427627563, 0.034324806183576584, 0.03284814581274986, 0.03155229985713959, 0.030497543513774872, 0.029352379962801933, 0.027996262535452843, 0.02691137045621872, 0.02603742852807045, 0.02504294365644455, 0.02428954653441906, 0.02356628328561783, 0.02266220562160015, 0.02190880849957466, 0.02118554711341858, 0.02043214812874794, 0.01967875100672245, 0.01892535388469696, 0.018382906913757324, 0.01781032420694828, 0.01720760576426983, 0.01657475158572197, 0.01570081152021885, 0.015037820674479008, 0.014465237967669964, 0.013862519524991512]
ghgsgs4_Fraction=[1.0, 1.0, 0.9956883788108826, 0.9800302386283875, 0.9559757709503174, 0.9286686778068542, 0.8977307081222534, 0.8641452193260193, 0.828895628452301, 0.7915279865264893, 0.7519667148590088, 0.7135400772094727, 0.6767776012420654, 0.6388048529624939, 0.6049924492835999, 0.5757185816764832, 0.5420575141906738, 0.5119515657424927, 0.48661118745803833, 0.46232980489730835, 0.4406959116458893, 0.4191376566886902, 0.39818456768989563, 0.3783661127090454, 0.35786688327789307, 0.3405446410179138, 0.32322239875793457, 0.3076399266719818, 0.29054462909698486, 0.27405446767807007, 0.25854766368865967, 0.24576398730278015, 0.23388804495334625, 0.22201210260391235, 0.21111951768398285, 0.1998487114906311, 0.19046898186206818, 0.18328291177749634, 0.17397882044315338, 0.1659606695175171, 0.15665657818317413, 0.14901664853096008, 0.14183056354522705, 0.13487140834331512, 0.12851740419864655, 0.1232980340719223, 0.1170196682214737, 0.1111951619386673, 0.10665658116340637, 0.10242057591676712, 0.09803327918052673, 0.09394856542348862, 0.09062027186155319, 0.08540090918540955, 0.0823751911520958, 0.07844175398349762, 0.07473524659872055, 0.0717095285654068, 0.06868381053209305, 0.06543116271495819, 0.06232980266213417, 0.059531014412641525, 0.05756429582834244, 0.05552193522453308, 0.05310136079788208, 0.05068078637123108, 0.04833585396409035, 0.04644478112459183, 0.043570347130298615, 0.04122541472315788, 0.03903177008032799, 0.03774584084749222, 0.03661119565367699, 0.035400908440351486, 0.03396369144320488, 0.03282904624938965, 0.03154311701655388, 0.03018154390156269, 0.02912254072725773, 0.027534039691090584, 0.02655068039894104, 0.02526475116610527, 0.024205747991800308, 0.02291981875896454, 0.021936459466814995, 0.021104387938976288, 0.02042360045015812, 0.01906202733516693, 0.018229953944683075, 0.017397882416844368, 0.016868380829691887, 0.016187595203518867, 0.015204235911369324, 0.014977307058870792, 0.014296520501375198, 0.013615733943879604, 0.013086233288049698, 0.012481089681386948, 0.012102873995900154, 0.011497730389237404]

# Interpolate the backgorund fractions for any given input pt_Cut
Bkg_Frac=interp1d(pt_Array,Bkg_Fraction)
ghzgs2_Frac=interp1d(pt_Array,ghzgs2_Fraction)
ghzgs4_Frac=interp1d(pt_Array,ghzgs4_Fraction)
ghgsgs2_Frac=interp1d(pt_Array,ghgsgs2_Fraction)
ghgsgs4_Frac=interp1d(pt_Array,ghgsgs4_Fraction)

# Load formulae to calculate the expected gammaH signal #

def CS_HGam(g2aa,g2za,g4aa,g4za):
    RefCS=1.33E4 
    CS = RefCS*(g2za**2 + 0.5525*g2aa**2 + g4za**2 +0.5524 * g4aa**2 - 0.5785 * g2za*g2aa - 0.5771*g4za*g4aa)
    return CS

def BR_ZZ4l(g1zz,g2aa,g2za,g2zz,gzap_2,gzp2,g4aa,g4za,g4zz):
    SM_BR_H4l = 1.251*10**-4
    ### We only include couplings that impact HZZ
    ## 12 Gev MPhotonCut H4l Rate ###
    iso_terms= SM_BR_H4l*(1.0*(g1zz/2)*(g1zz/2)+0.1648*gzp2*gzp2+0.08528*g2zz*g2zz+0.03492*g4zz*g4zz+0.40891*gzap_2*gzap_2+45.72300*g2za*g2za+29.08704*g4za*g4za+27.63563*g2aa*g2aa+25.05375*g4aa*g4aa)
    mixed_terms_g1=SM_BR_H4l*(0.79652*(g1zz/2)*gzp2+0.49349*(g1zz/2)*g2zz-0.00048*(g1zz/2)*g4zz+0.11236*(g1zz/2)*gzap_2+0.67181*(g1zz/2)*g2za-0.10247*(g1zz/2)*g4za+0.27354*(g1zz/2)*g2aa+0.06200*(g1zz/2)*g4aa)
    mixed_terms_gzp2=SM_BR_H4l*(0.20049*gzp2*g2zz+6.79431e-05*gzp2*g4zz+0.04141*gzp2*gzap_2+0.35722*gzp2*g2za-0.01114*gzp2*g4za+0.078191*gzp2*g2aa-0.01740*gzp2*g4aa)
    mixed_terms_g2zz=SM_BR_H4l*(-9.61949e-05*g2zz*g4zz+0.02871*g2zz*gzap_2+0.20445*g2zz*g2za-0.00975*g2zz*g4za-0.03163*g2zz*g2aa+0.016685*g2zz*g4aa)
    mixed_terms_g4zz=SM_BR_H4l*(-5.26501e-06*g4zz*gzap_2-0.00666*g4zz*g2za+0.10520*g4zz*g4za-0.00679*g4zz*g2aa-0.06564*g4zz*g4aa)
    mixed_terms_gzap_2=SM_BR_H4l*(6.23615*gzap_2*g2za-0.00047*gzap_2*g4za+0.13753*gzap_2*g2aa-0.01397*gzap_2*g4aa)
    mixed_terms_g2za=SM_BR_H4l*(-0.09423*g2za*g4za+1.079235*g2za*g2aa+0.026425*g2za*g4aa)
    mixed_terms_g2aa=SM_BR_H4l*(0.006661*g2aa*g4aa)
    mixed_terms_g4za=SM_BR_H4l*(-0.040929*g4za*g2aa+0.88220*g4za*g4aa)
    BR_ZZ4l = iso_terms + mixed_terms_g1 + mixed_terms_gzp2 + mixed_terms_g2zz + mixed_terms_g4zz + mixed_terms_gzap_2 + mixed_terms_g2za + mixed_terms_g2aa + mixed_terms_g4za
    return BR_ZZ4l

### Calculating the background ####

# This formula was calculated from a calculation and is subject to change #

bkg_num = 17.831 * lumi/137. * Bkg_Frac(pt_Cut)

### Now we set up the making of templates for gammaH ###
# Note that we use g1=2 and ga=2 to match the rates for Fitting

Event='"qqH_"'

Template_Lists=[]

iso= ["ghz1","ghz1_prime2","ghz2","ghz4","ghzgs1_prime2","ghzgs2","ghzgs4","ghgsgs2","ghgsgs4"]

mixed = ["ghz1_ghz1_prime2","ghz1_ghz2","ghz1_ghz4","ghz1_ghzgs1_prime2","ghz1_ghzgs2","ghz1_ghzgs4","ghz1_ghgsgs2","ghz1_ghgsgs4",\
"ghz1_prime2_ghz2","ghz1_prime2_ghz4","ghz1_prime2_ghzgs1_prime2","ghz1_prime2_ghzgs2","ghz1_prime2_ghzgs4","ghz1_prime2_ghgsgs2","ghz1_prime2_ghgsgs4",\
"ghz2_ghz4","ghz2_ghzgs1_prime2","ghz2_ghzgs2","ghz2_ghzgs4","ghz2_ghgsgs2","ghz2_ghgsgs4",\
"ghz4_ghzgs1_prime2","ghz4_ghzgs2","ghz4_ghzgs4","ghz4_ghgsgs2","ghz4_ghgsgs4",\
"ghzgs1_prime2_ghzgs2","ghzgs1_prime2_ghzgs4","ghzgs1_prime2_ghgsgs2","ghzgs1_prime2_ghgsgs4",\
"ghzgs2_ghzgs4","ghzgs2_ghgsgs2","ghzgs2_ghgsgs4","ghgsgs2_ghgsgs4",\
"ghzgs4_ghgsgs2","ghzgs4_ghgsgs4"]

for coupl in iso:
  g1zz=gzp2=g2zz=g4zz=gzap_2=g2za=g4za=g2aa=g4aa=0
  if "ghz1" in coupl and "ghz1_prime" not in coupl:
    g1zz=2
  elif "ghz1_prime" in coupl:
    gzp2=1
  elif "ghz2" in coupl:
    g2zz=1
  elif "ghz4" in coupl:
    g4zz=1
  elif "ghzgs1_prime2" in coupl:
    gzap2=1
  elif "ghzgs2" in coupl:
    g2za=1
  elif "ghzgs4" in coupl:
    g4za=1
  elif "ghgsgs2" in coupl:
    g2aa=1
  elif "ghgsgs4" in coupl:
    g4aa=1
  print g4aa
  Num_Events_HGam_4l = lumi * CS_HGam(g2aa,g2za,g4aa,g4za) * BR_ZZ4l(g1zz,g2aa,g2za,g2zz,gzap_2,gzp2,g4aa,g4za,g4zz)
  # Need to scale the Num_Events_HGam_4l #
  # For now I do not scale #
  #AddProcess("qqH_0PHZg",495100.32)
  Template = "AddProcess("+Event+","+str(Num_Events_HGam_4l)+")"
  Template_Lists.append(Template)
for coupl in mixed:
    first_sel = False
    for cp in iso:
        if cp in coupl:
           if first_sel:
              if cp == 'ghz1' and 'ghz1_prime' not in coupl:
                 coupl2 = cp #second coupling used in the mixed coupling
              elif cp == 'ghz1' and 'ghz1_prime' in coupl:
                 if coupl == 'ghz1_ghz1_prime2':
                    coupl2 = cp
              else:
                 coupl2 = cp
           else:
              if cp == 'ghz1' and 'ghz1_prime' not in coupl:
                 coupl1 = cp #second coupling used in the mixed coupling
              elif cp == 'ghz1' and 'ghz1_prime' in coupl:
                 if coupl == 'ghz1_ghz1_prime2':
                    coupl1 = cp
              else:
                 coupl1 = cp
              first_sel = True
    coup_list=[coupl1,coupl2]
    g1zz=gzp2=g2zz=g4zz=gzap_2=g2za=g4za=g2aa=g4aa=0
    if "ghz1" in coup_list and "ghz1_prime" not in coup_list:
      g1zz=2
    elif 'ghz1' and "ghz1_prime" in coup_list:
      if coupl == 'ghz1_ghz1_prime2':
        gzp2=1
        g1zz=2
      else:
        gzp2=1
    elif "ghz2" in coup_list:
      g2zz=1
    elif "ghz4" in coup_list:
      g4zz=1
    elif "ghzgs1_prime2" in coup_list:
      gzap2=1
    elif "ghzgs2" in coup_list:
      g2za=1
    elif "ghzgs4" in coup_list:
      g4za=1
    elif "ghgsgs2" in coup_list:
      g2aa=1
    elif "ghgsgs4" in coup_list:
      g4aa=1
    Num_Events_HGam_4l = lumi * CS_HGam(g2aa,g2za,g4aa,g4za) * BR_ZZ4l(g1zz,g2aa,g2za,g2zz,gzap_2,gzp2,g4aa,g4za,g4zz)
    # Need to scale the Num_Events_HGam_4l #
    # For now I do not scale #
    #AddProcess("qqH_0PHZg",495100.32)
    Template = "AddProcess("+Event+","+str(Num_Events_HGam_4l)+")"
    Template_Lists.append(Template)

print Template_Lists
